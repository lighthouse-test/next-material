{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/runner/work/next-material/next-material/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Select from \"@material-ui/core/Select\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { format } from \"date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { TYPES } from \"./todos\";\nexport var TodoForm = function TodoForm(props) {\n  var _useState = useState(props.todo),\n      todo = _useState[0],\n      setTodo = _useState[1];\n\n  var _useState2 = useState(TYPES),\n      types = _useState2[0];\n\n  var _useState3 = useState({\n    status: false\n  }),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  var formChangeHandler = function formChangeHandler(event) {\n    var target = event.target;\n    var name = target.name;\n    var value;\n\n    switch (target.type) {\n      case \"checkbox\":\n        value = target.checked;\n        break;\n\n      default:\n        value = target.value;\n        break;\n    }\n\n    setTodo(_objectSpread({}, Object.assign(todo, _defineProperty({}, name, value))));\n  };\n\n  var updateTodoDateHandler = function updateTodoDateHandler(date) {\n    setTodo(_objectSpread({}, Object.assign(todo, {\n      date: format(date, \"yyyy-MM-dd\")\n    })));\n  };\n\n  var updateTodoHandler = function updateTodoHandler(event) {\n    event.preventDefault();\n    setErrors({\n      status: false\n    });\n\n    if (!todo.name) {\n      setErrors(_objectSpread({}, Object.assign(errors, {\n        name: \"Name is required.\",\n        status: true\n      })));\n    }\n\n    if (!todo.description) {\n      setErrors(_objectSpread({}, Object.assign(errors, {\n        description: \"Description is required.\",\n        status: true\n      })));\n    }\n\n    if (!todo.type) {\n      setErrors(_objectSpread({}, Object.assign(errors, {\n        type: \"Type is required.\",\n        status: true\n      })));\n    }\n\n    if (!todo.date) {\n      setErrors(_objectSpread({}, Object.assign(errors, {\n        date: \"Date is required.\",\n        status: true\n      })));\n    }\n\n    setTimeout(function () {\n      if (!errors.status) {\n        props.onAddOrUpdate(todo);\n      } else {\n        alert(\"All Fields are required\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"form\", {\n      onSubmit: updateTodoHandler,\n      noValidate: true,\n      children: /*#__PURE__*/_jsxs(Dialog, {\n        open: !!todo,\n        children: [/*#__PURE__*/_jsxs(DialogTitle, {\n          children: [todo.id ? \"Update\" : \"Add\", \" Todo\"]\n        }), /*#__PURE__*/_jsxs(DialogContent, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(TextField, {\n              label: \"Name\",\n              variant: \"filled\",\n              name: \"name\",\n              onChange: formChangeHandler,\n              value: todo.name,\n              helperText: errors.name,\n              required: true\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(TextField, {\n              label: \"Description\",\n              variant: \"filled\",\n              name: \"description\",\n              onChange: formChangeHandler,\n              value: todo.description,\n              helperText: errors.description,\n              required: true,\n              multiline: true\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsxs(FormControl, {\n              children: [/*#__PURE__*/_jsx(InputLabel, {\n                children: \"Type\"\n              }), /*#__PURE__*/_jsx(Select, {\n                id: \"type\",\n                name: \"type\",\n                onChange: formChangeHandler,\n                value: todo.type,\n                required: true,\n                children: types.map(function (type) {\n                  return /*#__PURE__*/_jsx(MenuItem, {\n                    value: type,\n                    children: type\n                  }, type);\n                })\n              }), /*#__PURE__*/_jsx(FormHelperText, {\n                children: errors.type\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsxs(FormControl, {\n              children: [/*#__PURE__*/_jsx(FormLabel, {\n                children: \"Confidential\"\n              }), /*#__PURE__*/_jsxs(RadioGroup, {\n                name: \"confidential\",\n                row: true,\n                value: todo.confidential,\n                onChange: formChangeHandler,\n                children: [/*#__PURE__*/_jsx(FormControlLabel, {\n                  value: \"Yes\",\n                  control: /*#__PURE__*/_jsx(Radio, {}),\n                  label: \"Yes\",\n                  checked: todo.confidential === \"Yes\"\n                }), /*#__PURE__*/_jsx(FormControlLabel, {\n                  value: \"No\",\n                  control: /*#__PURE__*/_jsx(Radio, {}),\n                  label: \"No\",\n                  checked: todo.confidential === \"No\"\n                })]\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(FormControlLabel, {\n              control: /*#__PURE__*/_jsx(Checkbox, {\n                name: \"remind\",\n                onChange: formChangeHandler,\n                checked: todo.remind\n              }),\n              label: \"Remind\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(MuiPickersUtilsProvider, {\n              utils: DateFnsUtils,\n              children: /*#__PURE__*/_jsx(KeyboardDatePicker, {\n                name: \"date\",\n                format: \"yyyy-MM-dd\",\n                label: \"Date\",\n                value: todo.date,\n                onChange: updateTodoDateHandler,\n                required: true\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(DialogActions, {\n          children: /*#__PURE__*/_jsx(Button, {\n            color: \"primary\",\n            onClick: updateTodoHandler,\n            children: todo.id ? \"Update\" : \"Add\"\n          })\n        })]\n      })\n    })\n  });\n};\nexport default TodoForm;","map":null,"metadata":{},"sourceType":"module"}